// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// MidasBetaC
arma::mat MidasBetaC(int nlag, double param1, double param2);
RcppExport SEXP _MidasQuantR_MidasBetaC(SEXP nlagSEXP, SEXP param1SEXP, SEXP param2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nlag(nlagSEXP);
    Rcpp::traits::input_parameter< double >::type param1(param1SEXP);
    Rcpp::traits::input_parameter< double >::type param2(param2SEXP);
    rcpp_result_gen = Rcpp::wrap(MidasBetaC(nlag, param1, param2));
    return rcpp_result_gen;
END_RCPP
}
// objFun
double objFun(Rcpp::NumericVector params, Rcpp::NumericVector yr, Rcpp::NumericMatrix Xr, Rcpp::NumericMatrix Xr_neg, Rcpp::NumericMatrix Xr_pos, double q, bool beta2para, bool As);
RcppExport SEXP _MidasQuantR_objFun(SEXP paramsSEXP, SEXP yrSEXP, SEXP XrSEXP, SEXP Xr_negSEXP, SEXP Xr_posSEXP, SEXP qSEXP, SEXP beta2paraSEXP, SEXP AsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr_neg(Xr_negSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr_pos(Xr_posSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type beta2para(beta2paraSEXP);
    Rcpp::traits::input_parameter< bool >::type As(AsSEXP);
    rcpp_result_gen = Rcpp::wrap(objFun(params, yr, Xr, Xr_neg, Xr_pos, q, beta2para, As));
    return rcpp_result_gen;
END_RCPP
}
// condQuantile
arma::colvec condQuantile(Rcpp::NumericVector params, Rcpp::NumericVector yr, Rcpp::NumericMatrix Xr, Rcpp::NumericMatrix Xr_neg, Rcpp::NumericMatrix Xr_pos, bool beta2para, bool As);
RcppExport SEXP _MidasQuantR_condQuantile(SEXP paramsSEXP, SEXP yrSEXP, SEXP XrSEXP, SEXP Xr_negSEXP, SEXP Xr_posSEXP, SEXP beta2paraSEXP, SEXP AsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr_neg(Xr_negSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr_pos(Xr_posSEXP);
    Rcpp::traits::input_parameter< bool >::type beta2para(beta2paraSEXP);
    Rcpp::traits::input_parameter< bool >::type As(AsSEXP);
    rcpp_result_gen = Rcpp::wrap(condQuantile(params, yr, Xr, Xr_neg, Xr_pos, beta2para, As));
    return rcpp_result_gen;
END_RCPP
}
// GetIniParamsC
NumericMatrix GetIniParamsC(Rcpp::NumericVector yr, Rcpp::NumericMatrix Xr, Rcpp::NumericMatrix Xr_neg, Rcpp::NumericMatrix Xr_pos, double q, int numInitialsRand, int numInitials, bool beta2para, bool As);
RcppExport SEXP _MidasQuantR_GetIniParamsC(SEXP yrSEXP, SEXP XrSEXP, SEXP Xr_negSEXP, SEXP Xr_posSEXP, SEXP qSEXP, SEXP numInitialsRandSEXP, SEXP numInitialsSEXP, SEXP beta2paraSEXP, SEXP AsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr_neg(Xr_negSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr_pos(Xr_posSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type numInitialsRand(numInitialsRandSEXP);
    Rcpp::traits::input_parameter< int >::type numInitials(numInitialsSEXP);
    Rcpp::traits::input_parameter< bool >::type beta2para(beta2paraSEXP);
    Rcpp::traits::input_parameter< bool >::type As(AsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetIniParamsC(yr, Xr, Xr_neg, Xr_pos, q, numInitialsRand, numInitials, beta2para, As));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MidasQuantR_MidasBetaC", (DL_FUNC) &_MidasQuantR_MidasBetaC, 3},
    {"_MidasQuantR_objFun", (DL_FUNC) &_MidasQuantR_objFun, 8},
    {"_MidasQuantR_condQuantile", (DL_FUNC) &_MidasQuantR_condQuantile, 7},
    {"_MidasQuantR_GetIniParamsC", (DL_FUNC) &_MidasQuantR_GetIniParamsC, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_MidasQuantR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
